class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> neighbors = new HashMap<>();
        int[] indegrees = new int[numCourses];
        int[] topologicalOrder = new int[numCourses];
        //int[] result = new int[numCourses];
        
        for(int i=0;i<prerequisites.length;i++) {
            int desc = prerequisites[i][0];
            int src = prerequisites[i][1];
            List<Integer> lst = neighbors.getOrDefault(src, new ArrayList<Integer>());
            lst.add(desc);
            neighbors.put(src, lst);
            indegrees[desc] ++;
        }
        
        Queue<Integer> queue = new LinkedList<Integer>();
        for(int i=0;i<numCourses;i++) {
            if(indegrees[i] == 0) {
                queue.add(i);
            }
        }
        
        int order = 0;
        while(!queue.isEmpty()) {
            int x = queue.poll();
            topologicalOrder[order] = x;
            order++;
            if(neighbors.containsKey(x)) {
            List<Integer> adj = neighbors.get(x);
            
            for(int i = 0;i<adj.size();i++) {
                int y = adj.get(i);
                indegrees[y] -- ;
                if(indegrees[y] == 0){
                    queue.add(y);
                }
            }
            }
        }
        
        if(order == numCourses) {
            return topologicalOrder;
        }else {
            return new int[0];
        }
    }
}
