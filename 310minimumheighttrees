class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> list = new ArrayList<>();
        if(n<=2) {
            for(int i=0;i<n;i++) {
                list.add(i);
            }
            return list;
        }
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(i, new HashSet<Integer>());
        }
        for(int i=0;i<edges.length;i++) {
            int e1 = edges[i][0];
            int e2 = edges[i][1];
            
            Set<Integer> list1= map.get(e1);
            list1.add(e2);
            map.put(e1, list1);
            
            Set<Integer> list2= map.get(e2);
            list2.add(e1);
            map.put(e2, list2);
        }
        
        
        for(int i=0;i<n;i++) {
            if(map.containsKey(i)) {
                if(map.get(i).size()==1) {
                    list.add(i);
                }
            }
        }
        
        int remaining = n;
        while(remaining>2) {
            remaining = remaining - list.size();
            List<Integer> newNodes = new ArrayList<>();
            for(int i=0;i<list.size();i++) {
                Set<Integer> neighbors = map.get(list.get(i));
                if(!neighbors.isEmpty()) {
                    int neighbor = neighbors.iterator().next();
                    //neighbors.remove(neighbor);
                    map.get(neighbor).remove(list.get(i));
                    if(map.get(neighbor).size()==1) {
                        newNodes.add(neighbor);
                    }
                }
            }
            list = newNodes;
        }
        return list;
    }
}
