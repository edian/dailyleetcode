class Solution {
    int[][] rows = new int[9][10];
    int[][] cols = new int[9][10];
    int[][] subbox = new int[9][10];
    
    boolean flag;
    
    public void solveSudoku(char[][] board) {
        for(int i=0;i<board.length;i++) {
            for (int j=0;j<board[0].length;j++) {
                if(board[i][j] != '.') {
                    int d = board[i][j] - '0';
                    placeNumber(d, i, j, board);
                }
            }
        }
        flag = false;
        backtrack(board, 0, 0);
    }
    
    
    
    private void placeNumber(int d, int i, int j, char[][] board) {
        int box = (i/3) * 3 + j / 3;
        //if(rows[i][d] + cols[j][d] + subbox[box][d] == 0) {
            board[i][j] = (char)(d + '0');
            rows[i][d] = 1;
            cols[j][d] = 1;
            subbox[box][d] = 1;
        //}
    }
    
    private void placeNextNumber(int row, int col, char[][] board) {
        if(row == board.length -1 && col == board.length - 1) {
            flag = true;
            return;
        }
        if(col == board.length - 1) {
            backtrack(board, row +1, 0);
        } else {
            backtrack(board, row, col + 1);
        }
    }
    
    private void backtrack(char[][] board, int row, int col) {
        if(board[row][col] == '.') {
            for(int i=1;i<10;i++) {
                int box = (row/3) * 3 + col / 3;
                if(rows[row][i] + cols[col][i] + subbox[box][i] == 0) {
                    placeNumber(i, row, col, board);
                    placeNextNumber(row, col, board);
                    if(flag) {
                        return;
                    } else {
                        board[row][col] = '.';
                        rows[row][i] = 0;
                        cols[col][i] = 0;
                        subbox[box][i] = 0;
                    }
                }
                
            }
        } else {
            placeNextNumber(row, col, board);
        }
        
    }
}
